dat=dat[,c(1,3,6)]
colnames(dat)[1]="x"
######################################
qq = c(0.05,0.5,0.95)
m1 = rq(y ~ ns(x,n_splines), data=dat_SA, tau=qq)
#predict(m1,data.frame(x=1404733))
xvals = seq(min(dat_SA$x), max(dat_SA$x), length.out=100)
rqs1 = data.frame(x=xvals, predict(m1, newdata=data.frame(x=xvals)))
names(rqs1) = c("x", paste0("p",100*qq))
result=list()
result[[1]]=dat
result[[2]]=rqs1
return(result)
} # end function
setwd("H:/Speciale/project endemism/Post defence analyses (03)/analyses")
load("hum polygons/IOC10.1/dist_0.25degrees.RData")
e_d=read.csv("Other data files/IOC10.1/species elevations_IOC10,1.csv",h=T,sep=";")
ff=read.csv("hum polygons/IOC10.1/coord_reference.csv",h
refs=read.csv("H:/Speciale/project endemism/Revision analyses/taxa list2_IOC10,1.csv",h=T,sep=";")
#refs=subset(refs,!refs$status_in.geny=="missing")
refs$phyloname=gsub("'","",refs$phyloname)
refs$range=NA=T)
load("andes_species.RData")
ff$andes=rep(0,nrow(ff))
ff1=ff
coordinates(ff1) <- ~ x + y
ff1@proj4string <- crs(shape)
ddd=over(andes,ff1)
ddd=over( ff1 , andes , fn = NULL)
andes_points=as.numeric(rownames(ddd[complete.cases(ddd),]))
sp=vector()
for(i in andes_points){
for(j in 1:length(dist_0.25degrees)){
if(i %in% dist_0.25degrees[[j]]){
sp=append(sp,names(dist_0.25degrees)[j])
}
} # end j
print(i)
}
andes_species=sort(unique(sp))
and=data.frame(sp=andes_species,range=NA)
for(i in 1:nrow(and)){
pos=which(names(dist_0.25degrees) == and$sp[i])
and$range[i]=length(dist_0.25degrees[[pos]])
}
and$phyloname=refs$phyloname[match(and$sp, refs$Andes_species)]
qua=quantile(and$range,0.33)
end=and$phyloname[which(and$range<=qua)]
sub=subset(e_d,e_d$Species_name %in% andes_species)
pos=which(sub$MinOfCMEC_MIN==sub$MaxOfCMEC_MAX)
sub$MinOfCMEC_MIN[pos]=sub$MinOfCMEC_MIN[pos]-50
sub$MaxOfCMEC_MAX[pos]=sub$MaxOfCMEC_MAX[pos]+50
intv=10
ww=seq(0,5000,intv)
cc=ww
e_mat=matrix(0,nrow=nrow(sub),ncol=length(ww))
for(i in 1:nrow(e_mat)){
for(j in 1:length(ww)){
if(ww[j] >= sub$MinOfCMEC_MIN[i] & ww[j] <= sub$MaxOfCMEC_MAX[i]){
e_mat[i,j]=1
}
}
print(i)
}
rownames(e_mat)=sub$Species_name
colSums(e_mat)
ff=read.csv("hum polygons/IOC10.1/coord_reference.csv",h=T,sep = ";")
head(ff)
e_d=read.csv("Other data files/IOC10.1/species elevations_IOC10,1.csv",h=T,sep=",")
ff=read.csv("hum polygons/IOC10.1/coord_reference.csv",h=T,sep = ",")
head(ff)
setwd("H:/Speciale/project endemism/Post defence analyses (03)/analyses")
load("hum polygons/IOC10.1/dist_0.25degrees.RData")
e_d=read.csv("Other data files/IOC10.1/species elevations_IOC10,1.csv",h=T,sep=";")
ff=read.csv("hum polygons/IOC10.1/coord_reference.csv",h=T,sep = ",")
refs=read.csv("H:/Speciale/project endemism/Revision analyses/taxa list2_IOC10,1.csv",h=T,sep=";")
#refs=subset(refs,!refs$status_in.geny=="missing")
refs$phyloname=gsub("'","",refs$phyloname)
refs$range=NA=T)
load("andes_species.RData")
ff$andes=rep(0,nrow(ff))
ff1=ff
coordinates(ff1) <- ~ x + y
ff1@proj4string <- crs(shape)
ddd=over(andes,ff1)
ddd=over( ff1 , andes , fn = NULL)
andes_points=as.numeric(rownames(ddd[complete.cases(ddd),]))
sp=vector()
for(i in andes_points){
for(j in 1:length(dist_0.25degrees)){
if(i %in% dist_0.25degrees[[j]]){
sp=append(sp,names(dist_0.25degrees)[j])
}
} # end j
print(i)
}
andes_species=sort(unique(sp))
and=data.frame(sp=andes_species,range=NA)
for(i in 1:nrow(and)){
pos=which(names(dist_0.25degrees) == and$sp[i])
and$range[i]=length(dist_0.25degrees[[pos]])
}
and$phyloname=refs$phyloname[match(and$sp, refs$Andes_species)]
qua=quantile(and$range,0.33)
end=and$phyloname[which(and$range<=qua)]
sub=subset(e_d,e_d$Species_name %in% andes_species)
pos=which(sub$MinOfCMEC_MIN==sub$MaxOfCMEC_MAX)
sub$MinOfCMEC_MIN[pos]=sub$MinOfCMEC_MIN[pos]-50
sub$MaxOfCMEC_MAX[pos]=sub$MaxOfCMEC_MAX[pos]+50
intv=10
ww=seq(0,5000,intv)
cc=ww
e_mat=matrix(0,nrow=nrow(sub),ncol=length(ww))
for(i in 1:nrow(e_mat)){
for(j in 1:length(ww)){
if(ww[j] >= sub$MinOfCMEC_MIN[i] & ww[j] <= sub$MaxOfCMEC_MAX[i]){
e_mat[i,j]=1
}
}
print(i)
}
rownames(e_mat)=sub$Species_name
colSums(e_mat)
setwd("H:/Documents/GITHUB repositories/Hummingbird-cradles-and-museums/data")
elv_mat=e_mat
save(elv_mat,file="elv_mat.RData")
dev.off()
dev.off()
dev.off()
dim(e_mat)
ww
rowSums(E_mat)
rowSums(e_mat)
i=1
qua1=quantile(Choose_TBL[,i],0.25)
qua2=quantile(Choose_TBL[,i],0.75)
new=rownames(Choose_TBL)[which(ee1<=qua1)]
old=rownames(Choose_TBL)[which(ee1>=qua2)]
Choose_TBL=TBL_random # select one of TBL_random, TBL_early and TBL_late
#Matrix listing terminal branch length of endemic species (25% range size quantile) over 1000 permutations; missing species in the phylogeny were added based on a random sample from all R-values
load("TBL_random.RData")
qua1=quantile(Choose_TBL[,i],0.25)
Choose_TBL=TBL_random # select one of TBL_random, TBL_early and TBL_late
qua1=quantile(Choose_TBL[,i],0.25)
qua2=quantile(Choose_TBL[,i],0.75)
new=rownames(Choose_TBL)[which(ee1<=qua1)]
old=rownames(Choose_TBL)[which(ee1>=qua2)]
colnames(elv_mat)=elv=ww=seq(0,5000,10)
colnames(elv_mat)=elv=seq(0,5000,10)
#Looping to generate the richness of young and old endemic species in each elevational band (j) for each of the 1000 permutations (i)
n_rep=1000
res_mat_young=matrix(0,ncol=ncol(e_mat),nrow=n_rep)
res_mat_old=matrix(0,ncol=ncol(e_mat),nrow=n_rep)
res_mat_elv=matrix(0,ncol=ncol(e_mat),nrow=n_rep)
for(i in 1:n_rep){
qua1=quantile(Choose_TBL[,i],0.25)
qua2=quantile(Choose_TBL[,i],0.75)
young=rownames(Choose_TBL)[which(Choose_TBL[,i]<=qua1)] #determining young endemic species
old=rownames(Choose_TBL)[which(Choose_TBL[,i]>=qua2)] #determining old endemic species
old1=refs$Andes_species[match(old,refs$phyloname)]
young1=refs$Andes_species[match(new,refs$phyloname)]
for(j in 1:ncol(elv_mat)){
sps=as.character(rownames(e_mat)[which(e_mat[,j] ==1)])
#Extracting the richness of young and old endemic species within each elevational band
obs_old=length(which(sps %in% old1))
obs_young=length(which(sps %in% young1))
res_mat_old[i,j]=obs_old
res_mat_neo[i,j]=obs_young
res_mat_elv[i,j]=elv[j]
} #end j
print(i)
} # end i
#Looping to generate the richness of young and old endemic species in each elevational band (j) for each of the 1000 permutations (i)
n_rep=1000
res_mat_young=matrix(0,ncol=ncol(e_mat),nrow=n_rep)
res_mat_old=matrix(0,ncol=ncol(e_mat),nrow=n_rep)
res_mat_elv=matrix(0,ncol=ncol(e_mat),nrow=n_rep)
qua1=quantile(Choose_TBL[,i],0.25)
qua2=quantile(Choose_TBL[,i],0.75)
young=rownames(Choose_TBL)[which(Choose_TBL[,i]<=qua1)] #determining young endemic species
old=rownames(Choose_TBL)[which(Choose_TBL[,i]>=qua2)] #determining old endemic species
old1=refs$Andes_species[match(old,refs$phyloname)]
young1=refs$Andes_species[match(new,refs$phyloname)]
young1=refs$Andes_species[match(young,refs$phyloname)]
young1
for(j in 1:ncol(elv_mat)){
sps=as.character(rownames(elv_mat)[which(elv_mat[,j] ==1)])
#Extracting the richness of young and old endemic species within each elevational band
obs_old=length(which(sps %in% old1))
obs_young=length(which(sps %in% young1))
res_mat_old[i,j]=obs_old
res_mat_neo[i,j]=obs_young
res_mat_elv[i,j]=elv[j]
} #end j
for(j in 1:ncol(elv_mat)){
sps=as.character(rownames(elv_mat)[which(elv_mat[,j] ==1)])
#Extracting the richness of young and old endemic species within each elevational band
obs_old=length(which(sps %in% old1))
obs_young=length(which(sps %in% young1))
res_mat_old[i,j]=obs_old
res_mat_young[i,j]=obs_young
res_mat_elv[i,j]=elv[j]
} #end j
for(i in 1:n_rep){
qua1=quantile(Choose_TBL[,i],0.25)
qua2=quantile(Choose_TBL[,i],0.75)
young=rownames(Choose_TBL)[which(Choose_TBL[,i]<=qua1)] #determining young endemic species
old=rownames(Choose_TBL)[which(Choose_TBL[,i]>=qua2)] #determining old endemic species
old1=refs$Andes_species[match(old,refs$phyloname)]
young1=refs$Andes_species[match(young,refs$phyloname)]
for(j in 1:ncol(elv_mat)){
sps=as.character(rownames(elv_mat)[which(elv_mat[,j] ==1)])
#Extracting the richness of young and old endemic species within each elevational band
obs_old=length(which(sps %in% old1))
obs_young=length(which(sps %in% young1))
res_mat_old[i,j]=obs_old
res_mat_young[i,j]=obs_young
res_mat_elv[i,j]=elv[j]
} #end j
print(i)
} # end i
?ns
?rq
require(ggplot2)
require(quantreg)
require(splines
require(ggplot2)
require(quantreg)
require(splines)
#ordering the results for plotting
x=vector();y1=vector();y2=vector()
for(i in 1:ncol(res_mat_rel)){
x=append(x, res_mat_elv[,i])
y1=append(y1, res_mat_old[,i])
y2=append(y2, res_mat_young[,i])
}
#using quantile regression to compute the 95% percent confidence interval
n_splines=25
dat_old=data.frame(x=x,y=y1,group="Old")
quan = c(0.025,0.5,0.975)
m1 = rq(y1 ~ ns(x,n_splines), data=dat_old, tau=quan)
xvals = seq(min(dat_old$x), max(dat_old$x), length.out=100)
rqs_old = data.frame(x=xvals, predict(m1, newdata=data.frame(x=xvals)))
names(rqs_old) = c("x", paste0("p",100*quan))
#ordering the results for plotting
x=vector();y1=vector();y2=vector()
for(i in 1:ncol(res_mat_old)){
x=append(x, res_mat_elv[,i])
y1=append(y1, res_mat_old[,i])
y2=append(y2, res_mat_young[,i])
}
#using quantile regression to compute the 95% percent confidence interval
n_splines=25
dat_old=data.frame(x=x,y=y1,group="Old")
quan = c(0.025,0.5,0.975)
m1 = rq(y1 ~ ns(x,n_splines), data=dat_old, tau=quan)
xvals = seq(min(dat_old$x), max(dat_old$x), length.out=100)
rqs_old = data.frame(x=xvals, predict(m1, newdata=data.frame(x=xvals)))
names(rqs_old) = c("x", paste0("p",100*quan))
dat_new=data.frame(x=x,y=y2,group="New")
quan = c(0.025,0.5,0.975) #95% confidence interval
m1 = rq(y2 ~ ns(x,n_splines), data=dat_new, tau=quan)
xvals = seq(min(dat_new$x), max(dat_new$x), length.out=100)
rqs_new = data.frame(x=xvals, predict(m1, newdata=data.frame(x=xvals)))
names(rqs_new) = c("x", paste0("p",100*quan))
rqs_old[rqs_old < 0.1] <- 0
rqs_new[rqs_new < 0.1] <- 0
windows(13,8)
pp1=ggplot() +
geom_ribbon(data = rqs_old,aes(ymin = p25, ymax = p97.5,x=x),fill=t_col("red",50))+
theme_bw()+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
geom_line(data = rqs_old,aes(x = x, y = p50),color="red",lwd=2) +
geom_ribbon(data = rqs_new,aes(ymin =p2.5, ymax = p97.5,x=x),fill=t_col("cyan3",50))+
theme_bw()+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
geom_line(data = rqs_new,aes(x = x, y = p50),color="cyan3",lwd=2) +ylim(0,15)+
ylab("Species Richness")+xlab("")+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))+xlim(0,5000)
pp1
pp1=ggplot() +
geom_ribbon(data = rqs_old,aes(ymin = p2.5, ymax = p97.5,x=x),fill=t_col("red",50))+
theme_bw()+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
geom_line(data = rqs_old,aes(x = x, y = p50),color="red",lwd=2) +
geom_ribbon(data = rqs_new,aes(ymin =p2.5, ymax = p97.5,x=x),fill=t_col("cyan3",50))+
theme_bw()+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
geom_line(data = rqs_new,aes(x = x, y = p50),color="cyan3",lwd=2) +ylim(0,15)+
ylab("Species Richness")+xlab("")+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))+xlim(0,5000)
pp1
Choose_TBL=TBL_early # select one of TBL_random, TBL_early and TBL_late
#Looping to generate the richness of young and old endemic species in each elevational band (j) for each of the 1000 permutations (i)
n_rep=1000
res_mat_young=matrix(0,ncol=ncol(e_mat),nrow=n_rep)
res_mat_old=matrix(0,ncol=ncol(e_mat),nrow=n_rep)
res_mat_elv=matrix(0,ncol=ncol(e_mat),nrow=n_rep)
for(i in 1:n_rep){
qua1=quantile(Choose_TBL[,i],0.25)
qua2=quantile(Choose_TBL[,i],0.75)
young=rownames(Choose_TBL)[which(Choose_TBL[,i]<=qua1)] #determining young endemic species
old=rownames(Choose_TBL)[which(Choose_TBL[,i]>=qua2)] #determining old endemic species
old1=refs$Andes_species[match(old,refs$phyloname)]
young1=refs$Andes_species[match(young,refs$phyloname)]
for(j in 1:ncol(elv_mat)){
sps=as.character(rownames(elv_mat)[which(elv_mat[,j] ==1)])
#Extracting the richness of young and old endemic species within each elevational band
obs_old=length(which(sps %in% old1))
obs_young=length(which(sps %in% young1))
res_mat_old[i,j]=obs_old
res_mat_young[i,j]=obs_young
res_mat_elv[i,j]=elv[j]
} #end j
print(i)
} # end i
#ordering the results for plotting
x=vector();y1=vector();y2=vector()
for(i in 1:ncol(res_mat_old)){
x=append(x, res_mat_elv[,i])
y1=append(y1, res_mat_old[,i])
y2=append(y2, res_mat_young[,i])
}
#using quantile regression to compute the 95% percent confidence interval
n_splines=25
dat_old=data.frame(x=x,y=y1,group="Old")
quan = c(0.025,0.5,0.975) #compute median and the 95% confidence interval
m1 = rq(y1 ~ ns(x,n_splines), data=dat_old, tau=quan)
xvals = seq(min(dat_old$x), max(dat_old$x), length.out=100)
rqs_old = data.frame(x=xvals, predict(m1, newdata=data.frame(x=xvals)))
names(rqs_old) = c("x", paste0("p",100*quan))
dat_new=data.frame(x=x,y=y2,group="New")
quan = c(0.025,0.5,0.975) #compute median and the 95% confidence interval
m1 = rq(y2 ~ ns(x,n_splines), data=dat_new, tau=quan)
xvals = seq(min(dat_new$x), max(dat_new$x), length.out=100)
rqs_new = data.frame(x=xvals, predict(m1, newdata=data.frame(x=xvals)))
names(rqs_new) = c("x", paste0("p",100*quan))
rqs_old[rqs_old < 0.1] <- 0
rqs_new[rqs_new < 0.1] <- 0
windows(13,8)
pp1=ggplot() +
geom_ribbon(data = rqs_old,aes(ymin = p2.5, ymax = p97.5,x=x),fill=t_col("red",50))+
theme_bw()+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
geom_line(data = rqs_old,aes(x = x, y = p50),color="red",lwd=2) +
geom_ribbon(data = rqs_new,aes(ymin =p2.5, ymax = p97.5,x=x),fill=t_col("cyan3",50))+
theme_bw()+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
geom_line(data = rqs_new,aes(x = x, y = p50),color="cyan3",lwd=2) +ylim(0,15)+
ylab("Species Richness")+xlab("")+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))+xlim(0,5000)
pp1
ee1<-TBL_median
data=data.frame(elev=NA,length=NA)
qua1=quantile(TBL_median,0.25)
qua2=quantile(TBL_median,0.75)
young=names(TBL_median)[which(TBL_median<=qua1)] #determining young endemic species
old=names(TBL_median)[which(TBL_median>=qua2)] #determining old endemic species
#Determining the terminal branch length of species in each elevational band
for(i in 1:ncol(elv_mat)){
sps=as.character(rownames(elv_mat)[which(elv_mat[,i] ==1)])
phylonam=refs$phyloname[which(refs$Andes_species %in% sps)]
phylonam=subset(phylonam,phylonam %in% end)
TBL_elevation=TBL_median[which(names(TBL_median) %in% phylonam)] #branch length of species in a focal elevational band
sub_data=data.frame(elev=elv[i],length=TBL_elevation)
data=rbind(data,sub_data)
print(i)
}
bands=c(500,1000,1500,2000,2500,3000,3500,4000) #choosing bands to plot
plot_data=subset(data,data$elev %in% bands)
band_median=vector()
#for(i in 1:length(bands)){band_median=append(band_median,median(subset(data$length,data$elev==bands[i]))) }
pp2=ggplot(plot_data, aes(x=elev, y=length,group=elev)) +
geom_boxplot(fill="gray90")+
geom_hline(yintercept=quantile(TBL_median,0.25),lty=2,lwd=2,col="cyan3")+
geom_hline(yintercept=quantile(TBL_median,0.75),lty=2,lwd=2,col="red")+
theme_bw()+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
xlab("Elevation (meters)") +ylab("Terminal branch length (MY)")+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))+xlim(0,5000)+xlab("")
windows(18,25)
ggarrange(pp1,pp2,labels = c("A", "B"),widths = c(0.6,0.5),
ncol = 1, nrow = 2)
Choose_TBL=TBL_random # select one of TBL_random, TBL_early and TBL_late
#Looping to generate the richness of young and old endemic species in each elevational band (j) for each of the 1000 permutations (i)
n_rep=1000
res_mat_young=matrix(0,ncol=ncol(e_mat),nrow=n_rep)
res_mat_old=matrix(0,ncol=ncol(e_mat),nrow=n_rep)
res_mat_elv=matrix(0,ncol=ncol(e_mat),nrow=n_rep)
for(i in 1:n_rep){
qua1=quantile(Choose_TBL[,i],0.25)
qua2=quantile(Choose_TBL[,i],0.75)
young=rownames(Choose_TBL)[which(Choose_TBL[,i]<=qua1)] #determining young endemic species
old=rownames(Choose_TBL)[which(Choose_TBL[,i]>=qua2)] #determining old endemic species
old1=refs$Andes_species[match(old,refs$phyloname)]
young1=refs$Andes_species[match(young,refs$phyloname)]
for(j in 1:ncol(elv_mat)){
sps=as.character(rownames(elv_mat)[which(elv_mat[,j] ==1)])
#Extracting the richness of young and old endemic species within each elevational band
obs_old=length(which(sps %in% old1))
obs_young=length(which(sps %in% young1))
res_mat_old[i,j]=obs_old
res_mat_young[i,j]=obs_young
res_mat_elv[i,j]=elv[j]
} #end j
print(i)
} # end i
#ordering the results for plotting
x=vector();y1=vector();y2=vector()
for(i in 1:ncol(res_mat_old)){
x=append(x, res_mat_elv[,i])
y1=append(y1, res_mat_old[,i])
y2=append(y2, res_mat_young[,i])
}
#using quantile regression to compute the 95% percent confidence interval
n_splines=25
dat_old=data.frame(x=x,y=y1,group="Old")
quan = c(0.025,0.5,0.975) #compute median and the 95% confidence interval
m1 = rq(y1 ~ ns(x,n_splines), data=dat_old, tau=quan)
xvals = seq(min(dat_old$x), max(dat_old$x), length.out=100)
rqs_old = data.frame(x=xvals, predict(m1, newdata=data.frame(x=xvals)))
names(rqs_old) = c("x", paste0("p",100*quan))
dat_new=data.frame(x=x,y=y2,group="New")
quan = c(0.025,0.5,0.975) #compute median and the 95% confidence interval
m1 = rq(y2 ~ ns(x,n_splines), data=dat_new, tau=quan)
xvals = seq(min(dat_new$x), max(dat_new$x), length.out=100)
rqs_new = data.frame(x=xvals, predict(m1, newdata=data.frame(x=xvals)))
names(rqs_new) = c("x", paste0("p",100*quan))
rqs_old[rqs_old < 0.1] <- 0
rqs_new[rqs_new < 0.1] <- 0
#plotting panel A
panel_A=ggplot() +
geom_ribbon(data = rqs_old,aes(ymin = p2.5, ymax = p97.5,x=x),fill=t_col("red",50))+
theme_bw()+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
geom_line(data = rqs_old,aes(x = x, y = p50),color="red",lwd=2) +
geom_ribbon(data = rqs_new,aes(ymin =p2.5, ymax = p97.5,x=x),fill=t_col("cyan3",50))+
theme_bw()+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
geom_line(data = rqs_new,aes(x = x, y = p50),color="cyan3",lwd=2) +ylim(0,15)+
ylab("Species Richness")+xlab("")+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))+xlim(0,5000)
#Panel B: elevational variability in the endemic species' branch lengths
ee1<-TBL_median
data=data.frame(elev=NA,length=NA)
qua1=quantile(TBL_median,0.25)
qua2=quantile(TBL_median,0.75)
young=names(TBL_median)[which(TBL_median<=qua1)] #determining young endemic species
old=names(TBL_median)[which(TBL_median>=qua2)] #determining old endemic species
#Determining the terminal branch length of species in each elevational band
for(i in 1:ncol(elv_mat)){
sps=as.character(rownames(elv_mat)[which(elv_mat[,i] ==1)])
phylonam=refs$phyloname[which(refs$Andes_species %in% sps)]
phylonam=subset(phylonam,phylonam %in% end)
TBL_elevation=TBL_median[which(names(TBL_median) %in% phylonam)] #branch length of species in a focal elevational band
sub_data=data.frame(elev=elv[i],length=TBL_elevation)
data=rbind(data,sub_data)
}
bands=c(500,1000,1500,2000,2500,3000,3500,4000) #choosing bands to plot
plot_data=subset(data,data$elev %in% bands)
band_median=vector()
panel_B=ggplot(plot_data, aes(x=elev, y=length,group=elev)) +
geom_boxplot(fill="gray90")+
geom_hline(yintercept=quantile(TBL_median,0.25),lty=2,lwd=2,col="cyan3")+
geom_hline(yintercept=quantile(TBL_median,0.75),lty=2,lwd=2,col="red")+
theme_bw()+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
xlab("Elevation (meters)") +ylab("Terminal branch length (MY)")+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))+xlim(0,5000)+xlab("")
windows(18,25)
ggarrange(panel_A,panel_B,labels = c("A", "B"),widths = c(0.6,0.5),
ncol = 1, nrow = 2)
pos=match(ownames(TBL_random),refs$Andes_species[pos])
pos=match(rownames(TBL_random),refs$Andes_species[pos])
pos
pos=match(rownames(TBL_random),refs$phyloname[pos])
pos
rownames(TBL_random)
pos=match(rownames(TBL_random),refs$phyloname)
pos
cbind(rownames(TBL_random),refs$Andes_species[pos])
rr=TBL_random
rownames(rr)=refs$Andes_species[pos]
aa=apply(rr,1,mean)
aa
cc=apply(rr,1,quantile,probs=0,975)
cc
dd=apply(rr,1,quantile,probs=0,025)
dd
cbind(aa,bb,cc,dd)
aa=apply(rr,1,mean)
bb=apply(rr,1,sd)
cc=apply(rr,1,quantile,probs=0,975)
dd=apply(rr,1,quantile,probs=0,025)
cbind(aa,bb,cc,dd)
ee=cbind(aa,bb,cc,dd)
order(rownames(ee))
ee[order(rownames(ee)),]
aa=apply(rr,1,mean)
bb=apply(rr,1,sd)
cc=apply(rr,1,quantile,probs=0,975)
dd=apply(rr,1,quantile,probs=0,025)
ee=cbind(aa,bb,cc,dd)
ee[order(rownames(ee)),]
cc=dd
aa=apply(rr,1,mean)
bb=apply(rr,1,sd)
cc=apply(rr,1,quantile,probs=0,975)
dd=apply(rr,1,quantile,probs=0,025)
ee=cbind(aa,bb,cc,dd)
ee[order(rownames(ee)),]
cc==dd
?quantile
cc=apply(rr,1,quantile,probs=0,975)
aa=apply(rr,1,mean)
bb=apply(rr,1,sd)
cc=apply(rr,1,quantile,probs=0.975)
dd=apply(rr,1,quantile,probs=0.025)
ee=cbind(aa,bb,cc,dd)
ee[order(rownames(ee)),]
dd==cc
?drop.tip
