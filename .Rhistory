insinstall.packages("raster")
install.packages("raster")
require(sp)
require(raster)
require(maptools)
require(wesanderson)
require(scales)
require(pals)
require(rgeos)
library(RColorBrewer)
require(colorRamps)
require(jcolors)
require(ggplot2)
require(fBasics)
require(plotrix)
library(nodiv)
library(ggtree)
colfunc1<-colorRampPalette(c('#004B73', '#0084AA', '#89C866', '#D0E16F', '#F8F178', '#FCAA1C', '#FF0000', '#660000'))
colfunc<-colorRampPalette(rev(c("#D77B62","#E9A553","#F8D945","#CBDC60","#78C371","#55BE99","#4B96A5","#586698")))
plot2d=function(data,vec1,vec2,lon,lat,shapefile=NULL,choose_cols=c("green", "yellow", "black", "blue"),pix=0.00080003){
data=data[complete.cases(data),]
data$lon=data[,lon]
data$lat=data[,lat]
data1=data
coordinates(data)=~lon+lat
if(!is.null(shapefile)){
data@proj4string <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
pixels <- SpatialPixelsDataFrame(data, tolerance = pix, data@data)
raster <- raster(pixels[,vec1])
r_A=projectRaster(raster,crs=crs(shapefile))
raster <- raster(pixels[,vec2])
r_B=projectRaster(raster,crs=crs(shapefile))
rr3=brick(r_A,r_B)
pos=is.na(rr3)
rr3[is.na(rr3)] <- 0
v=values(rr3)
colors <- colormap::colors2d(v, choose_cols)
}
if(is.null(shapefile)){
data@proj4string <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
pixels <- SpatialPixelsDataFrame(data, tolerance = pix, data@data)
r_A <- raster(pixels[,vec1])
r_B <- raster(pixels[,vec2])
rr3=brick(r_A,r_B)
pos=is.na(rr3)
rr3[is.na(rr3)] <- 0
v=values(rr3)
colors <- colormap::colors2d(v, choose_cols)}
col <- rr3[[c(1,1,1)]]
col[] <- t(col2rgb(colors))
col[rowSums(v[])==0]=NA
result=list()
result[[1]]=col
ss1=seq(min(data1[,vec1]),max(data1[,vec1]),length.out = 200)
ss2=seq(min(data1[,vec2]),max(data1[,vec2]),length.out = 200)
mat1=matrix(NA,200,200)
mat2=matrix(NA,200,200)
for(i in 1:200){
for(j in 1:200){
mat1[i,j]=i
mat2[i,j]=j
}}
col_lab=colormap::colors2d(cbind(c(mat1),c(mat2)), choose_cols)
label=data.frame(vec1=ss1[c(mat1)],vec2=ss2[c(mat2)],col=as.character(col_lab))
result[[2]]=label
return(result)
}
t_col <- function(color, percent = 50, name = NULL) {
#      color = color name
#    percent = % transparency
#       name = an optional name for the color
## Get RGB values for named color
rgb.val <- col2rgb(color)
## Make new color using input color as base and alpha set by transparency
t.col <- rgb(rgb.val[1], rgb.val[2], rgb.val[3],
max = 255,
alpha = (100 - percent) * 255 / 100,
names = name)
## Save the color
invisible(t.col)
}
setwd("H:/Speciale/project endemism/Post defence analyses (03)/analyses")
MSR2=raster("Other data files/MSR2.tif")
n_col=200
vec1=colfunc(n_col)
col_vector=rep(NA,n_col)
for(i in 1:n_col){
col_vector[i]=t_col(vec1[i])
}
shape <- readShapeSpatial("shapefiles/ne_50m_land.shp")
proj4string(shape)=CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
CP <- as(extent(-137.5, -34.5, -55.5, 58.5), "SpatialPolygons")
proj4string(CP) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
shape <- gIntersection(shape, CP, byid=TRUE)
shape1=spTransform(shape,"+proj=cea +lat_ts=0 +lon_0=-56.33789062499999 +ellps=WGS84")
andes=readShapeSpatial("shapefiles/Mountains.shp")
proj4string(andes)=CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
cco=c( rgb(250,242,133, maxColorValue=255,alpha = 0.5),         #top left
rgb(111,204,221, maxColorValue=255,alpha=0.5),        #bottum right
rgb(43,44,119, maxColorValue=255,alpha=0.5),
rgb(238,36,36, maxColorValue=255,alpha = 0.5))      # top left
cco=c( rgb(130,0,80, maxColorValue=255,alpha = 0.5),
rgb(0,150,235, maxColorValue=255,alpha=0.5),
rgb(191,188,191, maxColorValue=255,alpha = 0.5),
rgb(255,230,15, maxColorValue=255,alpha=0.5))
res=read.csv("rress_IOC10,1_IOC10,1_cut25.csv",h=T,sep=",")
ff=read.csv("hum polygons/IOC10.1/coord_reference.csv",h=T)
load("hum polygons/IOC10.1/dist_0.25degrees.RData")
age_classes=read.csv("Other data files/age_classes_IOC10,1(03).csv",h=T,sep=";")
qua_25=quantile(age_classes$modified.ages,0.25)
qua_75=quantile(age_classes$modified.ages,0.75)
neo=age_classes$sp[which(age_classes$modified.ages<=qua_25)]
relicts=age_classes$sp[which(age_classes$modified.ages>=qua_75)]
res$lat=ff$y1[match(res$ID,ff$ID2)]
res$lon=ff$x1[match(res$ID,ff$ID2)]
plot(res$lat~res$lon)
res$r=rep(NA,nrow(res))
res$r_neo=NA
res$r_relict=NA
for(i in 1:nrow(res)){
sp=vector()
ID=res$ID[i]
for(j in 1:length(dist_0.25degrees)){
if(ID %in% dist_0.25degrees[[j]]){
sp=append(sp,names(dist_0.25degrees)[j])
}
} # end j
if(length(sp)>0){
res$r[i]=length(sp)
res$r_neo[i]=length(which(sp %in% neo))
res$r_relict[i]=length(which(sp %in% relicts))
}
print(i)
}
shape2=crop(shape,extent(andes)*1.1)
n_col=200
lab_cex=1.5
vec1=colfunc(n_col)
res1=subset(res,res$r_neo>0)
coordinates(res1)=~lon+lat
res1@proj4string <- crs(shape)
pixels <- SpatialPixelsDataFrame(res1, tolerance = 0.0040003, res1@data)
raster <- raster(pixels[,'r_neo'])
r3=projectRaster(raster,crs=crs(shape))
windows(14,10)
plot(andes,col="lightgray",border="lightgray")
#plot(MSR2,col=gray.colors(20, start = 0, end = 1),legend=FALSE,axes=F, box=FALSE)
plot(r3,col=vec1,add=T,legend.args=list(text='Richness', side=2, font=1, line=0.5, cex=lab_cex),
legend.width=1.2, legend.shrink=0.2,zlim=c(1,5))
plot(shape2,add=T,border="darkgray")
res1=subset(res,res$r_relict>0)
coordinates(res1)=~lon+lat
res1@proj4string <- crs(shape)
pixels <- SpatialPixelsDataFrame(res1, tolerance = 0.0040003, res1@data)
raster <- raster(pixels[,'r_relict'])
r3=projectRaster(raster,crs=crs(shape))
windows(14,10)
plot(andes,col="lightgray",border="lightgray")
plot(r3,col=vec1,add=T,legend.args=list(text='Richness', side=2, font=1, line=0.5, cex=lab_cex),
legend.width=1.2, legend.shrink=0.2,zlim=c(1,5))
plot(shape2,add=T,border="darkgray")
res1=res
coordinates(res1)=~lon+lat
res1@proj4string <- crs(shape)
pixels <- SpatialPixelsDataFrame(res1, tolerance = 0.0040003, res1@data)
raster <- raster(pixels[,'r'])
r3=projectRaster(raster,crs=crs(shape))
windows(14,10)
plot(andes,col="lightgray",border="lightgray")
plot(r3,col=vec1,add=T,legend.args=list(text='Richness', side=2, font=1, line=0.5, cex=lab_cex),
legend.width=1.2, legend.shrink=0.2,zlim=c(1,5))
plot(shape2,add=T,border="darkgray")
r3
end
age_classes
age_classes$sp
length(which(sp %in%age_classes$sp))
res=read.csv("rress_IOC10,1_IOC10,1_cut25.csv",h=T,sep=",")
ff=read.csv("hum polygons/IOC10.1/coord_reference.csv",h=T)
load("hum polygons/IOC10.1/dist_0.25degrees.RData")
age_classes=read.csv("Other data files/age_classes_IOC10,1(03).csv",h=T,sep=";")
qua_25=quantile(age_classes$modified.ages,0.25)
qua_75=quantile(age_classes$modified.ages,0.75)
neo=age_classes$sp[which(age_classes$modified.ages<=qua_25)]
relicts=age_classes$sp[which(age_classes$modified.ages>=qua_75)]
res$lat=ff$y1[match(res$ID,ff$ID2)]
res$lon=ff$x1[match(res$ID,ff$ID2)]
plot(res$lat~res$lon)
res$r=rep(NA,nrow(res))
res$r_neo=NA
res$r_relict=NA
res$r_end=NA
for(i in 1:nrow(res)){
sp=vector()
ID=res$ID[i]
for(j in 1:length(dist_0.25degrees)){
if(ID %in% dist_0.25degrees[[j]]){
sp=append(sp,names(dist_0.25degrees)[j])
}
} # end j
if(length(sp)>0){
res$r[i]=length(sp)
res$r_neo[i]=length(which(sp %in% neo))
res$r_relict[i]=length(which(sp %in% relicts))
res$r_end[i]=length(which(sp %in%age_classes$sp))
}
print(i)
}
nrow(res)
getwd()
setwd(H:/Documents/GITHUB repositories/Hummingbird-cradles-and-museums)
setwd("H:/Documents/GITHUB repositories/Hummingbird-cradles-and-museums")
write.csv(res,"res.csv")
